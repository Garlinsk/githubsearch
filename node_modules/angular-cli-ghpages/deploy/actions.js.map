{"version":3,"file":"actions.js","sourceRoot":"","sources":["../../deploy/actions.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,yDAGmC;AAMnC,SAA8B,MAAM,CAClC,MAMC,EACD,OAAuB,EACvB,WAAwB,EACxB,OAAe;;QAGf,IAAI,OAAO,CAAC,OAAO,EAAE;YACnB,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;SAC1C;aAAM;YACL,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;gBACnB,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;aACpD;YAED,MAAM,SAAS,qBACV,CAAC,OAAO,CAAC,QAAQ,IAAI,EAAE,QAAQ,EAAE,OAAO,CAAC,QAAQ,EAAE,CAAC,CACxD,CAAC;YAEF,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,OAAO,CAAC,MAAM,CAAC,OAAO,GAAG,CAAC,CAAC;YAC/D,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAoB,WAAW,CAAC,IAAI,GAAG,CAAC,CAAC;YAE7D,MAAM,KAAK,GAAG,MAAM,OAAO,CAAC,cAAc,CACxC,kCAAsB,CAAC,WAAW,CAAC,IAAI,CAAC,kCAEnC,WAAW,CAAC,OAAO,GACnB,SAAS,EAEf,CAAC;YACF,MAAM,WAAW,GAAG,MAAM,KAAK,CAAC,MAAM,CAAC;YAEvC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;gBACxB,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;aAClD;SACF;QAGD,MAAM,YAAY,GAAG,MAAM,OAAO,CAAC,gBAAgB,CACjD,kCAAsB,CAAC,WAAW,CAAC,IAAI,CAAC,CACzC,CAAC;QACF,IAAI,CAAC,YAAY,CAAC,UAAU,IAAI,OAAO,YAAY,CAAC,UAAU,KAAK,QAAQ,EAAE;YAC3E,MAAM,IAAI,KAAK,CACb,8DAA8D,WAAW,CAAC,IAAI,mBAAmB,CAClG,CAAC;SACH;QAED,MAAM,MAAM,CAAC,GAAG,CACd,YAAY,CAAC,UAAU,EACvB,OAAO,EACN,OAAO,CAAC,MAAuC,CACjD,CAAC;IACJ,CAAC;CAAA;AAxDD,yBAwDC","sourcesContent":["import {\n  BuilderContext,\n  targetFromTargetString\n} from '@angular-devkit/architect';\nimport { json, logging } from '@angular-devkit/core';\n\nimport { Schema } from './schema';\nimport { BuildTarget } from '../interfaces';\n\nexport default async function deploy(\n  engine: {\n    run: (\n      dir: string,\n      options: Schema,\n      logger: logging.LoggerApi\n    ) => Promise<void>;\n  },\n  context: BuilderContext,\n  buildTarget: BuildTarget,\n  options: Schema\n) {\n  // 1. BUILD\n  if (options.noBuild) {\n    context.logger.info(`ðŸ“¦ Skipping build`);\n  } else {\n    if (!context.target) {\n      throw new Error('Cannot execute the build target');\n    }\n\n    const overrides = {\n      ...(options.baseHref && { baseHref: options.baseHref })\n    };\n\n    context.logger.info(`ðŸ“¦ Building \"${context.target.project}\"`);\n    context.logger.info(`ðŸ“¦ Build target \"${buildTarget.name}\"`);\n\n    const build = await context.scheduleTarget(\n      targetFromTargetString(buildTarget.name),\n      {\n        ...buildTarget.options,\n        ...overrides\n      }\n    );\n    const buildResult = await build.result;\n\n    if (!buildResult.success) {\n      throw new Error('Error while building the app.');\n    }\n  }\n\n  // 2. DEPLOYMENT\n  const buildOptions = await context.getTargetOptions(\n    targetFromTargetString(buildTarget.name)\n  );\n  if (!buildOptions.outputPath || typeof buildOptions.outputPath !== 'string') {\n    throw new Error(\n      `Cannot read the output path option of the Angular project '${buildTarget.name}' in angular.json`\n    );\n  }\n\n  await engine.run(\n    buildOptions.outputPath,\n    options,\n    (context.logger as unknown) as logging.LoggerApi\n  );\n}\n"]}