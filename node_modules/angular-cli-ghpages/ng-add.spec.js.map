{"version":3,"file":"ng-add.spec.js","sourceRoot":"","sources":["../ng-add.spec.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,2DAAoE;AAEpE,qCAAiC;AAEjC,MAAM,YAAY,GAAG,YAAY,CAAC;AAClC,MAAM,YAAY,GAAG,SAAS,CAAC;AAE/B,MAAM,kBAAkB,GAAG,cAAc,CAAC;AAE1C,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;IACtB,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAChC,IAAI,IAAU,CAAC;QAEf,UAAU,CAAC,GAAG,EAAE;YACd,IAAI,GAAG,iBAAI,CAAC,KAAK,EAAE,CAAC;YACpB,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,IAAI,CAAC,SAAS,CAAC,mBAAmB,EAAE,CAAC,CAAC,CAAC;QACrE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE,GAAS,EAAE;YAC5D,MAAM,MAAM,GAAG,cAAK,CAAC;gBACnB,OAAO,EAAE,YAAY;aACtB,CAAC,CAAC,IAAI,EAAE,EAAsB,CAAC,CAAC;YAEjC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAE,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,CACrD,kBAAkB,CACnB,CAAC;QACJ,CAAC,CAAA,CAAC,CAAC;QAEH,EAAE,CAAC,0BAA0B,EAAE,GAAS,EAAE;YACxC,MAAM,QAAQ,GAAG,cAAK,CAAC;gBACrB,OAAO,EAAE,YAAY;aACtB,CAAC,CAAC,IAAI,EAAE,EAAsB,CAAC,CAAC;YAEjC,MAAM,MAAM,GAAG,cAAK,CAAC;gBACnB,OAAO,EAAE,kBAAkB;aAC5B,CAAC,CAAC,QAAQ,EAAE,EAAsB,CAAC,CAAC;YAErC,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,cAAc,CAAE,CAAC,QAAQ,EAAE,CAAC;YAEvD,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;QAC/C,CAAC,CAAA,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,EAAE,CAAC,8BAA8B,EAAE,GAAG,EAAE;YACtC,MAAM,IAAI,GAAG,iBAAI,CAAC,KAAK,EAAE,CAAC;YAC1B,MAAM,WAAW,GAAG,mBAAmB,EAAE,CAAC;YAC1C,OAAO,WAAW,CAAC,cAAc,CAAC;YAClC,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC;YAEzD,MAAM,CAAC,GAAG,EAAE,CACV,cAAK,CAAC;gBACJ,OAAO,EAAE,EAAE;aACZ,CAAC,CAAC,IAAI,EAAE,EAAsB,CAAC,CACjC,CAAC,YAAY,CACZ,qEAAqE,CACtE,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wCAAwC,EAAE,GAAS,EAAE;YACtD,MAAM,CAAC,GAAG,EAAE,CACV,cAAK,CAAC;gBACJ,OAAO,EAAE,YAAY;aACtB,CAAC,CAAC,iBAAI,CAAC,KAAK,EAAE,EAAE,EAAsB,CAAC,CACzC,CAAC,YAAY,CAAC,6BAA6B,CAAC,CAAC;QAChD,CAAC,CAAA,CAAC,CAAC;QAEH,EAAE,CAAC,gDAAgD,EAAE,GAAS,EAAE;YAC9D,MAAM,IAAI,GAAG,iBAAI,CAAC,KAAK,EAAE,CAAC;YAC1B,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;YAElC,MAAM,CAAC,GAAG,EAAE,CACV,cAAK,CAAC;gBACJ,OAAO,EAAE,YAAY;aACtB,CAAC,CAAC,IAAI,EAAE,EAAsB,CAAC,CACjC,CAAC,YAAY,CAAC,8BAA8B,CAAC,CAAC;QACjD,CAAC,CAAA,CAAC,CAAC;QAEH,EAAE,CAAC,mDAAmD,EAAE,GAAS,EAAE;YACjE,MAAM,IAAI,GAAG,iBAAI,CAAC,KAAK,EAAE,CAAC;YAC1B,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;YAE9D,MAAM,CAAC,GAAG,EAAE,CACV,cAAK,CAAC;gBACJ,OAAO,EAAE,YAAY;aACtB,CAAC,CAAC,IAAI,EAAE,EAAsB,CAAC,CACjC,CAAC,YAAY,CACZ,gEAAgE,CACjE,CAAC;QACJ,CAAC,CAAA,CAAC,CAAC;QAEH,EAAE,CAAC,sDAAsD,EAAE,GAAS,EAAE;YACpE,MAAM,IAAI,GAAG,iBAAI,CAAC,KAAK,EAAE,CAAC;YAC1B,IAAI,CAAC,MAAM,CACT,cAAc,EACd,IAAI,CAAC,SAAS,CAAC;gBACb,QAAQ,EAAE,EAAE,CAAC,YAAY,CAAC,EAAE,EAAE,WAAW,EAAE,SAAS,EAAE,EAAE;aACzD,CAAC,CACH,CAAC;YAEF,MAAM,CAAC,GAAG,EAAE,CACV,cAAK,CAAC;gBACJ,OAAO,EAAE,YAAY;aACtB,CAAC,CAAC,IAAI,EAAE,EAAsB,CAAC,CACjC,CAAC,YAAY,CACZ,0EAA0E,CAC3E,CAAC;QACJ,CAAC,CAAA,CAAC,CAAC;QAEH,EAAE,CAAC,wDAAwD,EAAE,GAAS,EAAE;YACtE,MAAM,IAAI,GAAG,iBAAI,CAAC,KAAK,EAAE,CAAC;YAC1B,IAAI,CAAC,MAAM,CACT,cAAc,EACd,IAAI,CAAC,SAAS,CAAC;gBACb,QAAQ,EAAE,EAAE,CAAC,YAAY,CAAC,EAAE,EAAE,WAAW,EAAE,aAAa,EAAE,EAAE;aAC7D,CAAC,CACH,CAAC;YAEF,MAAM,CAAC,GAAG,EAAE,CACV,cAAK,CAAC;gBACJ,OAAO,EAAE,YAAY;aACtB,CAAC,CAAC,IAAI,EAAE,EAAsB,CAAC,CACjC,CAAC,YAAY,CACZ,sHAAsH,CACvH,CAAC;QACJ,CAAC,CAAA,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,SAAS,mBAAmB;IAC1B,OAAO;QACL,cAAc,EAAE,YAAkC;QAClD,QAAQ,EAAE;YACR,CAAC,YAAY,CAAC,EAAE;gBACd,WAAW,EAAE,aAAa;gBAC1B,IAAI,EAAE,YAAY;gBAClB,SAAS,EAAE;oBACT,KAAK,EAAE;wBACL,OAAO,EAAE;4BACP,UAAU,EAAE,aAAa;yBAC1B;qBACF;iBACF;aACF;YACD,CAAC,kBAAkB,CAAC,EAAE;gBACpB,WAAW,EAAE,aAAa;gBAC1B,IAAI,EAAE,YAAY;gBAClB,SAAS,EAAE;oBACT,KAAK,EAAE;wBACL,OAAO,EAAE;4BACP,UAAU,EAAE,aAAa;yBAC1B;qBACF;iBACF;aACF;SACF;KACF,CAAC;AACJ,CAAC;AAED,MAAM,kBAAkB,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA8BzB,CAAC;AAEH,MAAM,oBAAoB,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAkC3B,CAAC","sourcesContent":["import { SchematicContext, Tree } from '@angular-devkit/schematics';\n\nimport { ngAdd } from './ng-add';\n\nconst PROJECT_NAME = 'pie-ka-chu';\nconst PROJECT_ROOT = 'pirojok';\n\nconst OTHER_PROJECT_NAME = 'pi-catch-you';\n\ndescribe('ng-add', () => {\n  describe('generating files', () => {\n    let tree: Tree;\n\n    beforeEach(() => {\n      tree = Tree.empty();\n      tree.create('angular.json', JSON.stringify(generateAngularJson()));\n    });\n\n    it('generates new files if starting from scratch', async () => {\n      const result = ngAdd({\n        project: PROJECT_NAME\n      })(tree, {} as SchematicContext);\n\n      expect(result.read('angular.json')!.toString()).toEqual(\n        initialAngularJson\n      );\n    });\n\n    it('overrides existing files', async () => {\n      const tempTree = ngAdd({\n        project: PROJECT_NAME\n      })(tree, {} as SchematicContext);\n\n      const result = ngAdd({\n        project: OTHER_PROJECT_NAME\n      })(tempTree, {} as SchematicContext);\n\n      const actual = result.read('angular.json')!.toString();\n\n      expect(actual).toEqual(overwriteAngularJson);\n    });\n  });\n\n  describe('error handling', () => {\n    it('fails if project not defined', () => {\n      const tree = Tree.empty();\n      const angularJSON = generateAngularJson();\n      delete angularJSON.defaultProject;\n      tree.create('angular.json', JSON.stringify(angularJSON));\n\n      expect(() =>\n        ngAdd({\n          project: ''\n        })(tree, {} as SchematicContext)\n      ).toThrowError(\n        'No Angular project selected and no default project in the workspace'\n      );\n    });\n\n    it('Should throw if angular.json not found', async () => {\n      expect(() =>\n        ngAdd({\n          project: PROJECT_NAME\n        })(Tree.empty(), {} as SchematicContext)\n      ).toThrowError('Could not find angular.json');\n    });\n\n    it('Should throw if angular.json can not be parsed', async () => {\n      const tree = Tree.empty();\n      tree.create('angular.json', 'hi');\n\n      expect(() =>\n        ngAdd({\n          project: PROJECT_NAME\n        })(tree, {} as SchematicContext)\n      ).toThrowError('Could not parse angular.json');\n    });\n\n    it('Should throw if specified project does not exist ', async () => {\n      const tree = Tree.empty();\n      tree.create('angular.json', JSON.stringify({ projects: {} }));\n\n      expect(() =>\n        ngAdd({\n          project: PROJECT_NAME\n        })(tree, {} as SchematicContext)\n      ).toThrowError(\n        'The specified Angular project is not defined in this workspace'\n      );\n    });\n\n    it('Should throw if specified project is not application', async () => {\n      const tree = Tree.empty();\n      tree.create(\n        'angular.json',\n        JSON.stringify({\n          projects: { [PROJECT_NAME]: { projectType: 'pokemon' } }\n        })\n      );\n\n      expect(() =>\n        ngAdd({\n          project: PROJECT_NAME\n        })(tree, {} as SchematicContext)\n      ).toThrowError(\n        'Deploy requires an Angular project type of \"application\" in angular.json'\n      );\n    });\n\n    it('Should throw if app does not have architect configured', async () => {\n      const tree = Tree.empty();\n      tree.create(\n        'angular.json',\n        JSON.stringify({\n          projects: { [PROJECT_NAME]: { projectType: 'application' } }\n        })\n      );\n\n      expect(() =>\n        ngAdd({\n          project: PROJECT_NAME\n        })(tree, {} as SchematicContext)\n      ).toThrowError(\n        'Cannot read the output path (architect.build.options.outputPath) of the Angular project \"pie-ka-chu\" in angular.json'\n      );\n    });\n  });\n});\n\nfunction generateAngularJson() {\n  return {\n    defaultProject: PROJECT_NAME as string | undefined,\n    projects: {\n      [PROJECT_NAME]: {\n        projectType: 'application',\n        root: PROJECT_ROOT,\n        architect: {\n          build: {\n            options: {\n              outputPath: 'dist/ikachu'\n            }\n          }\n        }\n      },\n      [OTHER_PROJECT_NAME]: {\n        projectType: 'application',\n        root: PROJECT_ROOT,\n        architect: {\n          build: {\n            options: {\n              outputPath: 'dist/ikachu'\n            }\n          }\n        }\n      }\n    }\n  };\n}\n\nconst initialAngularJson = `{\n  \"defaultProject\": \"pie-ka-chu\",\n  \"projects\": {\n    \"pie-ka-chu\": {\n      \"projectType\": \"application\",\n      \"root\": \"pirojok\",\n      \"architect\": {\n        \"build\": {\n          \"options\": {\n            \"outputPath\": \"dist/ikachu\"\n          }\n        },\n        \"deploy\": {\n          \\\"builder\\\": \\\"angular-cli-ghpages:deploy\\\",\n          \"options\": {}\n        }\n      }\n    },\n    \"pi-catch-you\": {\n      \"projectType\": \"application\",\n      \"root\": \"pirojok\",\n      \"architect\": {\n        \"build\": {\n          \"options\": {\n            \"outputPath\": \"dist/ikachu\"\n          }\n        }\n      }\n    }\n  }\n}`;\n\nconst overwriteAngularJson = `{\n  \"defaultProject\": \"pie-ka-chu\",\n  \"projects\": {\n    \"pie-ka-chu\": {\n      \"projectType\": \"application\",\n      \"root\": \"pirojok\",\n      \"architect\": {\n        \"build\": {\n          \"options\": {\n            \"outputPath\": \"dist/ikachu\"\n          }\n        },\n        \"deploy\": {\n          \\\"builder\\\": \\\"angular-cli-ghpages:deploy\\\",\n          \"options\": {}\n        }\n      }\n    },\n    \"pi-catch-you\": {\n      \"projectType\": \"application\",\n      \"root\": \"pirojok\",\n      \"architect\": {\n        \"build\": {\n          \"options\": {\n            \"outputPath\": \"dist/ikachu\"\n          }\n        },\n        \"deploy\": {\n          \"builder\": \"angular-cli-ghpages:deploy\",\n          \"options\": {}\n        }\n      }\n    }\n  }\n}`;\n"]}