"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = require("@angular-devkit/core/src/logger");
const engine = __importStar(require("./engine"));
describe('engine', () => {
    describe('prepareOptions', () => {
        const logger = new logger_1.NullLogger();
        beforeEach(() => {
            process.env = {};
        });
        it('should replace the string GH_TOKEN in the repo url (for backwards compatibility)', () => __awaiter(void 0, void 0, void 0, function* () {
            const options = {
                repo: 'https://GH_TOKEN@github.com/organisation/your-repo.git'
            };
            process.env.GH_TOKEN = 'XXX';
            const finalOptions = yield engine.prepareOptions(options, logger);
            expect(finalOptions.repo).toBe('https://XXX@github.com/organisation/your-repo.git');
        }));
        it('should be possible to use GH_TOKEN in repo url as a workaround for other tokens (for backwards compatibility)', () => __awaiter(void 0, void 0, void 0, function* () {
            const options = {
                repo: 'https://x-access-token:GH_TOKEN@github.com/organisation/your-repo.git'
            };
            process.env.GH_TOKEN = 'XXX';
            const finalOptions = yield engine.prepareOptions(options, logger);
            expect(finalOptions.repo).toBe('https://x-access-token:XXX@github.com/organisation/your-repo.git');
        }));
        it('should also add a personal access token (GH_TOKEN) to the repo url', () => __awaiter(void 0, void 0, void 0, function* () {
            const options = {
                repo: 'https://github.com/organisation/your-repo.git'
            };
            process.env.GH_TOKEN = 'XXX';
            const finalOptions = yield engine.prepareOptions(options, logger);
            expect(finalOptions.repo).toBe('https://x-access-token:XXX@github.com/organisation/your-repo.git');
        }));
        it('should also add a personal access token (PERSONAL_TOKEN) to the repo url', () => __awaiter(void 0, void 0, void 0, function* () {
            const options = {
                repo: 'https://github.com/organisation/your-repo.git'
            };
            process.env.PERSONAL_TOKEN = 'XXX';
            const finalOptions = yield engine.prepareOptions(options, logger);
            expect(finalOptions.repo).toBe('https://x-access-token:XXX@github.com/organisation/your-repo.git');
        }));
        it('should also add a installation access token (GITHUB_TOKEN) to the repo url', () => __awaiter(void 0, void 0, void 0, function* () {
            const options = {
                repo: 'https://github.com/organisation/your-repo.git'
            };
            process.env.GITHUB_TOKEN = 'XXX';
            const finalOptions = yield engine.prepareOptions(options, logger);
            expect(finalOptions.repo).toBe('https://x-access-token:XXX@github.com/organisation/your-repo.git');
        }));
        it('should discover the remote url, if no --repo is set', () => __awaiter(void 0, void 0, void 0, function* () {
            const options = {};
            const finalOptions = yield engine.prepareOptions(options, logger);
            expect(finalOptions.repo).toMatch(/angular-schule\/angular-cli-ghpages/);
        }));
    });
});
//# sourceMappingURL=engine.spec.js.map