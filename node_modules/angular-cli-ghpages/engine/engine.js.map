{"version":3,"file":"engine.js","sourceRoot":"","sources":["../../engine/engine.ts"],"names":[],"mappings":"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","sourcesContent":["import { logging } from '@angular-devkit/core';\nimport * as fse from 'fs-extra';\nimport * as path from 'path';\n\nimport { Schema } from '../deploy/schema';\nimport { GHPages } from '../interfaces';\nimport { defaults } from './defaults';\n\nimport Git from 'gh-pages/lib/git';\n\nexport async function run(\n  dir: string,\n  options: Schema,\n  logger: logging.LoggerApi\n) {\n  options = await prepareOptions(options, logger);\n\n  // this has to occur _after_ the monkeypatch of util.debuglog:\n  const ghpages = require('gh-pages');\n\n  // always clean the cache directory.\n  // avoids \"Error: Remote url mismatch.\"\n  if (options.dryRun) {\n    logger.info('Dry-run / SKIPPED: cleaning of the cache directory');\n  } else {\n    ghpages.clean();\n  }\n\n  await checkIfDistFolderExists(dir);\n  await createNotFoundPage(dir, options, logger);\n  await createCnameFile(dir, options, logger);\n  await publishViaGhPages(ghpages, dir, options, logger);\n\n  logger.info(\n    'ðŸŒŸ Successfully published via angular-cli-ghpages! Have a nice day!'\n  );\n}\n\nexport async function prepareOptions(\n  origOptions: Schema,\n  logger: logging.LoggerApi\n) {\n  const options = {\n    ...defaults,\n    ...origOptions\n  };\n\n  if (origOptions.noSilent) {\n    options.silent = !origOptions.noSilent;\n\n    // monkeypatch util.debuglog to get all the extra information\n    // see https://stackoverflow.com/a/39129886\n    const util = require('util');\n    let debuglog = util.debuglog;\n    util.debuglog = set => {\n      if (set === 'gh-pages') {\n        return function () {\n          let message = util.format.apply(util, arguments);\n          logger.info(message);\n        };\n      }\n      return debuglog(set);\n    };\n  }\n\n  if (origOptions.noDotfiles) {\n    options.dotfiles = !origOptions.noDotfiles;\n  }\n\n  if (options.dryRun) {\n    logger.info('Dry-run: No changes are applied at all.');\n  }\n\n  if (options.name && options.email) {\n    options['user'] = {\n      name: options.name,\n      email: options.email\n    };\n  }\n\n  if (process.env.TRAVIS) {\n    options.message +=\n      ' -- ' +\n      process.env.TRAVIS_COMMIT_MESSAGE +\n      ' \\n\\n' +\n      'Triggered by commit: https://github.com/' +\n      process.env.TRAVIS_REPO_SLUG +\n      '/commit/' +\n      process.env.TRAVIS_COMMIT +\n      '\\n' +\n      'Travis CI build: https://travis-ci.org/' +\n      process.env.TRAVIS_REPO_SLUG +\n      '/builds/' +\n      process.env.TRAVIS_BUILD_ID;\n  }\n\n  if (process.env.CIRCLECI) {\n    options.message +=\n      '\\n\\n' +\n      'Triggered by commit: https://github.com/' +\n      process.env.CIRCLE_PROJECT_USERNAME +\n      '/' +\n      process.env.CIRCLE_PROJECT_REPONAME +\n      '/commit/' +\n      process.env.CIRCLE_SHA1 +\n      '\\n' +\n      'CircleCI build: ' +\n      process.env.CIRCLE_BUILD_URL;\n  }\n\n  if (process.env.GITHUB_ACTIONS) {\n    options.message +=\n      '\\n\\n' +\n      'Triggered by commit: https://github.com/' +\n      process.env.GITHUB_REPOSITORY +\n      '/commit/' +\n      process.env.GITHUB_SHA;\n  }\n\n  // NEW in 0.6.2: always discover remote URL (if not set)\n  // this allows us to inject tokens from environment even if `--repo` is not set manually\n  if (!options.repo) {\n    options.repo = await getRemoteUrl(options);\n  }\n\n  // for backwards compatibility only,\n  // in the past --repo=https://GH_TOKEN@github.com/<username>/<repositoryname>.git was advised\n  //\n  // this repalcement was also used to inject other tokens into the URL,\n  // so it should only be removed with the next major version\n  if (\n    process.env.GH_TOKEN &&\n    options.repo &&\n    options.repo.includes('GH_TOKEN')\n  ) {\n    options.repo = options.repo.replace('GH_TOKEN', process.env.GH_TOKEN);\n  }\n  // preffered way: token is replaced from plain URL\n  else if (options.repo && !options.repo.includes('x-access-token:')) {\n    if (process.env.GH_TOKEN) {\n      options.repo = options.repo.replace(\n        'https://github.com/',\n        `https://x-access-token:${process.env.GH_TOKEN}@github.com/`\n      );\n    }\n\n    if (process.env.PERSONAL_TOKEN) {\n      options.repo = options.repo.replace(\n        'https://github.com/',\n        `https://x-access-token:${process.env.PERSONAL_TOKEN}@github.com/`\n      );\n    }\n\n    if (process.env.GITHUB_TOKEN) {\n      options.repo = options.repo.replace(\n        'https://github.com/',\n        `https://x-access-token:${process.env.GITHUB_TOKEN}@github.com/`\n      );\n    }\n  }\n\n  return options;\n}\n\nasync function checkIfDistFolderExists(dir: string) {\n  if (await !fse.pathExists(dir)) {\n    throw new Error(\n      'Dist folder does not exist. Check the dir --dir parameter or build the project first!'\n    );\n  }\n}\n\nasync function createNotFoundPage(\n  dir: string,\n  options: Schema,\n  logger: logging.LoggerApi\n) {\n  if (options.dryRun) {\n    logger.info('Dry-run / SKIPPED: copying of index.html to 404.html');\n    return;\n  }\n\n  // Note:\n  // There is no guarantee that there will be an index.html file,\n  // as we may may specify a custom index file.\n  // TODO: respect setting in angular.json\n  const indexHtml = path.join(dir, 'index.html');\n  const notFoundPage = path.join(dir, '404.html');\n\n  try {\n    return await fse.copy(indexHtml, notFoundPage);\n  } catch (err) {\n    logger.info(\n      'index.html could not be copied to 404.html. This does not look like an angular-cli project?!'\n    );\n    logger.info(\n      '(Hint: are you sure that you have setup the directory correctly?)'\n    );\n    logger.debug('Diagnostic info: ' + err.message);\n    return;\n  }\n}\n\nasync function createCnameFile(\n  dir: string,\n  options: Schema,\n  logger: logging.LoggerApi\n) {\n  if (!options.cname) {\n    return;\n  }\n\n  const cnameFile = path.join(dir, 'CNAME');\n  if (options.dryRun) {\n    logger.info(\n      'Dry-run / SKIPPED: creating of CNAME file with content: ' + options.cname\n    );\n    return;\n  }\n\n  try {\n    await fse.writeFile(cnameFile, options.cname);\n    logger.info('CNAME file created');\n  } catch (err) {\n    throw new Error('CNAME file could not be created. ' + err.message);\n  }\n}\n\nasync function publishViaGhPages(\n  ghPages: GHPages,\n  dir: string,\n  options: Schema,\n  logger: logging.LoggerApi\n) {\n  if (options.dryRun) {\n    logger.info(\n      `Dry-run / SKIPPED: publishing folder \"${dir}\" with the following options: ` +\n        JSON.stringify(\n          {\n            dir: dir,\n            repo:\n              options.repo ||\n              'falsy: current working directory (which must be a git repo in this case) will be used to commit & push',\n            message: options.message,\n            branch: options.branch,\n            user:\n              options.user ||\n              'falsy: local or global git username & email properties will be taken',\n            silent:\n              options.silent || 'falsy: logging is in silent mode by default',\n            dotfiles:\n              options.dotfiles || 'falsy: dotfiles are included by default',\n            cname: options.cname || 'falsy: no CNAME file will be created'\n          },\n          null,\n          '  '\n        )\n    );\n    return;\n  }\n\n  logger.info('ðŸš€ Uploading via git, please wait...');\n\n  // do NOT (!!) await ghPages.publish,\n  // the promise is implemented in such a way that it always succeeds â€“ even on errors!\n  return new Promise((resolve, reject) => {\n    ghPages.publish(dir, options, error => {\n      if (error) {\n        return reject(error);\n      }\n\n      resolve();\n    });\n  });\n}\n\nasync function getRemoteUrl(options) {\n  const git = new Git(process.cwd(), options.git);\n  return await git.getRemoteUrl(options.remote);\n}\n"]}