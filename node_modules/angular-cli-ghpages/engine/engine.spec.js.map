{"version":3,"file":"engine.spec.js","sourceRoot":"","sources":["../../engine/engine.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { NullLogger } from '@angular-devkit/core/src/logger';\n\nimport * as engine from './engine';\n\ndescribe('engine', () => {\n  describe('prepareOptions', () => {\n    const logger = new NullLogger();\n\n    beforeEach(() => {\n      process.env = {};\n    });\n\n    it('should replace the string GH_TOKEN in the repo url (for backwards compatibility)', async () => {\n      const options = {\n        repo: 'https://GH_TOKEN@github.com/organisation/your-repo.git'\n      };\n      process.env.GH_TOKEN = 'XXX';\n      const finalOptions = await engine.prepareOptions(options, logger);\n\n      expect(finalOptions.repo).toBe(\n        'https://XXX@github.com/organisation/your-repo.git'\n      );\n    });\n\n    // see https://github.com/EdricChan03/rss-reader/commit/837dc10c18bfa453c586bb564a662e7dad1e68ab#r36665276 as an example\n    it('should be possible to use GH_TOKEN in repo url as a workaround for other tokens (for backwards compatibility)', async () => {\n      const options = {\n        repo:\n          'https://x-access-token:GH_TOKEN@github.com/organisation/your-repo.git'\n      };\n      process.env.GH_TOKEN = 'XXX';\n      const finalOptions = await engine.prepareOptions(options, logger);\n\n      expect(finalOptions.repo).toBe(\n        'https://x-access-token:XXX@github.com/organisation/your-repo.git'\n      );\n    });\n\n    // ----\n\n    it('should also add a personal access token (GH_TOKEN) to the repo url', async () => {\n      const options = {\n        repo: 'https://github.com/organisation/your-repo.git'\n      };\n      process.env.GH_TOKEN = 'XXX';\n      const finalOptions = await engine.prepareOptions(options, logger);\n\n      expect(finalOptions.repo).toBe(\n        'https://x-access-token:XXX@github.com/organisation/your-repo.git'\n      );\n    });\n\n    it('should also add a personal access token (PERSONAL_TOKEN) to the repo url', async () => {\n      const options = {\n        repo: 'https://github.com/organisation/your-repo.git'\n      };\n      process.env.PERSONAL_TOKEN = 'XXX';\n      const finalOptions = await engine.prepareOptions(options, logger);\n\n      expect(finalOptions.repo).toBe(\n        'https://x-access-token:XXX@github.com/organisation/your-repo.git'\n      );\n    });\n\n    it('should also add a installation access token (GITHUB_TOKEN) to the repo url', async () => {\n      const options = {\n        repo: 'https://github.com/organisation/your-repo.git'\n      };\n      process.env.GITHUB_TOKEN = 'XXX';\n      const finalOptions = await engine.prepareOptions(options, logger);\n\n      expect(finalOptions.repo).toBe(\n        'https://x-access-token:XXX@github.com/organisation/your-repo.git'\n      );\n    });\n\n    // NEW in 0.6.2: always discover remote URL (if not set)\n    // this allows us to inject tokens from environment even if --repo is not set manually\n    // it uses gh-pages lib directly for this\n    it('should discover the remote url, if no --repo is set', async () => {\n      const options = {};\n      const finalOptions = await engine.prepareOptions(options, logger);\n\n      expect(finalOptions.repo).toMatch(/angular-schule\\/angular-cli-ghpages/);\n    });\n\n    /*\n    // i was not able to somehow catch an error... :-(\n    it('should should throw an exception, if remote url could not be discovered', async () => {\n\n      expect.assertions(1);\n\n      const options = { git: 'xxx' };\n\n      try {\n        await engine.prepareOptions(options, logger);\n      } catch (e) {\n        expect(e).toBeTruthy();\n      }\n    })*/\n  });\n});\n"]}